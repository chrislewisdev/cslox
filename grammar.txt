program         -> declaration* EOF;

declaration     -> funDecl | varDecl | statement | classDecl;

funDecl         -> "fun" function;
function        -> IDENTIFIER "(" parameters? ")" block;
parameters      -> IDENTIFIER ( "," IDENTIFIER )*;
varDecl         -> "var" IDENTIFIER ("=" expression)? ";";
classDecl       -> "class" IDENTIFIER ("<" IDENTIFIER)? "{" function* "}" ;

statement       ->  exprStmt | forStmt | ifStmt | printStmt | returnStmt | whileStmt | block;
exprStmt        ->  expression ";" ;
forStmt         ->  "for" "(" (varDecl | exprStmt | ";")
                    expression? ";"
                    expression? ")" statement;
ifStmt          ->  "if" "(" expression ")" statement ("else" statement)?;
printStmt       ->  "print" expression ";" ;
returnStmt      ->  "return" expression? ";" ;
whileStmt       ->  "while" "(" expression ")" statement;
block           ->  "{" declaration* "}";

expression      ->  assignment;
assignment      ->  (call ".")? IDENTIFIER "=" assignment
                    | logic_or;
logic_orq       ->  logic_and ( "or" logic_and )*;
logic_and       ->  equality ( "and" equality )*;
equality        ->  comparison ( ( "!=" | "==" ) comparison )* ;
comparison      ->  term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term            ->  factor ( ( "-" | "+" ) factor )* ;
factor          ->  unary ( ( "/" | "*" ) unary )* ;
unary           ->  ( "!" | "-" ) unary
                    | call ;
call            ->  primary ( "(" arguments? ")" | "." IDENTIFIER )* ;
primary         ->  NUMBER | STRING | "true" | "false" | "nil" | "this"
                    | "(" expression ")" | IDENTIFIER 
                    | "super" "." IDENTIFIER;

arguments       ->  expression ("," expression)* ;
